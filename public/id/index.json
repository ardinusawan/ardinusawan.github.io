[{"content":"Permasalahan Mengulang kembali apapun yang sudah dilakukan Bayangkan Anda telah melakukan beberapa commit, tetapi kemudian Anda melakukan git reset --hard HEAD~2 dan kehilangan dua commit terakhir. Anda dapat memulihkannya dengan cara berikut:\nCek log reflog git reflog Outputnya mungkin menunjukkan: c4f2a27 (HEAD -\u0026gt; main) HEAD@{0}: reset: moving to HEAD~2 a3d5b8e HEAD@{1}: commit: Menambahkan file README Anda ingin mengembalikan commit a3d5b8e: git reset --hard a3d5b8e Untuk memulihkan, kamu dapat menggunakan\ngit reset HEAD@{index} atau\ngit reset --hard HEAD@{index} Apa perbedaannya?\ngit reset --hard HEAD@{1} Jika kamu ingin benar-benar mengembalikan repository ke keadaan persis seperti commit HEAD@{1} dan membuang semua perubahan yang belum dikomit atau distage:\ngit reset --hard HEAD@{1} git reset HEAD@{1} Jika kamu ingin mengembalikan staging area ke commit HEAD@{1} tetapi tetap menjaga perubahan yang ada di working directory (misalnya untuk memeriksa atau menyimpan sementara perubahan yang ada):\ngit reset HEAD@{1} Kesimpulan git reset --hard: Mengembalikan repository sepenuhnya ke commit yang ditentukan, termasuk staging area dan working directory.\ngit reset: Mengembalikan commit yang ditentukan hanya untuk staging area, tidak mengubah working directory.\nMemperbaiki commit terakhir git add . # Atau menambahkan file individu git commit --amend --no-edit --amend artinya merubah. --no-edit artinya tanpa edit Merubah tanpa edit? Tapi barusan kita mengedit isi commit sebelumnnya?\nammend ini adalah untuk commit message, bukan isinya. Masih belum paham?\nMemperbaiki pesan commit terakhir git commit --amend Disini tanpa menggunakan --no-edit, jadi hanya mengganti pesan commitnya saja. Sudah jelas kan?\nTanpa sengaja membuat commit di branch master, harusnya di branch baru Pernah ga sih lupa checkout ke branch tetapi langsung ngoding di branch master(atau branch lainnya)? ðŸ¤£\nTenang, caranya gampang banget.\ngit reset HEAD~ \u0026ndash;hard Pada branch master, buat dulu branch baru git branch nama-branch-baru Reset master ke commit sebelumnya git reset HEAD~ --hard Checkout ke branch yang benar git branch nama-branch-baru git rebase -i HEAD~n Cara yang tadi berlaku jika hanya ada 1 commit yang di reset. Tapi kalo terlanjur banyak commit di master, gimana dong?\nLangkah yang berbeda hanya pada step ke 2\nDrop commit yang ingin dihapus git rebase -i HEAD~n # n adalah perkiraan berapa commit yang ingin di hapus Pada editor, cari commit mana yang ingin di hapus. Ubah pick ke drop. Lalu simpan. git cherry-pick commit-hash Ada cara yang lebih simple dan lebih sering saya gunakan, cherry-pick\ngit cherry-pick commit-hash Setelah melakukan cherry pick, dapat checkout kembali ke branch yang salah dan melalukan git reset HEAD~ --hard atau git rebase -i HEAD~n\nCatatan Jika commit pada master sudah terlanjur di push, bagaimana?\nHarus di force push ðŸ˜¢. Maka dari itu, branch master/main harus di guard agar tidak bisa commit langsung ya, hanya dapat di merge dari branch lain.\nUntuk cara force push akan ada penjelasannya tersendiri.\nMembatalkan commit yang lampau git revert [saved hash] Perbedaan revert dengan rebase -\u0026gt; drop atau reset --hard, revert membentuk commit baru. Jadi nanti kamu bisa revert commit yang me-revert commit ðŸ¤£\nJika ditengah proses rebase ingin membatalkan, gunakan git rebase --abort\nMenyimpan state git stash save \u0026#34;stash name\u0026#34; Mirip ketika bermain game dan menyimpan save, pada saat ngoding kita dapat menyimpan state saat ini dan men-load kemudian\nstash state git stash save \u0026#34;nama custom\u0026#34; # nama stash opsional Jika tanpa nama custom sh git stash save List stash git stash list Load state git stash apply stash@{n} # n: posisi stash yang didapatkan pada stash list Jika tanpa stash@{n} git stash apply Maka akan load stash trakhir. Perintah ini sama dengan git stash apply stash@{0} Mengembalikan keadaan file pada keadaan sebelumnya git checkout [hash] -- path/to/file Membantu jika ingin mengembalikan kondisi file sesuai pada commit tertentu\nPush Paksa (Force Push) Penjelasan kali ini akan lebih panjang, karena merupakan tindakan yang berbahaya!\nForce push (git push --force) adalah tindakan untuk memaksa mengirimkan perubahan dari repository lokal ke repository remote, menggantikan riwayat commit yang ada di remote. Ini berguna ketika Anda perlu memperbarui riwayat commit di remote setelah melakukan perubahan seperti rebase atau amend.\nMengapa Force Push Berbahaya? Force push bisa berbahaya karena:\nMenghapus riwayat commit di remote yang mungkin penting. Membuat commit rekan tim Anda hilang jika mereka juga bekerja pada branch yang sama. Menyebabkan konflik jika orang lain telah menggabungkan (merge) commit yang Anda ganti. --force Misalkan Anda telah mengubah riwayat commit di branch main dengan melakukan rebase atau mengedit commit, dan Anda ingin memaksa mengupdate remote repository.\nBuat beberapa perubahan dan lakukan commit: git commit --amend -m \u0026#34;Memperbaiki pesan commit\u0026#34; Push perubahan dengan force: git push --force origin main Dengan menggunakan --force, Anda menggantikan riwayat commit yang ada di remote dengan riwayat commit baru dari repository lokal Anda.\n--force-with-lease --force-with-lease adalah opsi yang lebih aman daripada --force karena melakukan pemeriksaan tambahan sebelum melakukan push. Opsi ini memastikan bahwa Anda hanya akan memaksa push jika tidak ada orang lain yang telah melakukan push ke remote sejak Anda terakhir kali menarik (pull) perubahan.\nKeuntungan Menggunakan --force-with-lease Mencegah Anda secara tidak sengaja menimpa commit orang lain. Memberikan peringatan jika terdapat perubahan di remote yang belum Anda tarik (pull). Contoh Penggunaan --force-with-lease Misalkan Anda melakukan perubahan di branch main dan ingin memastikan tidak ada yang telah melakukan push ke remote sejak terakhir kali Anda menarik perubahan.\nBuat beberapa perubahan dan lakukan commit: git commit --amend -m \u0026#34;Memperbaiki pesan commit\u0026#34; Push perubahan dengan --force-with-lease: git push --force-with-lease origin main Jika tidak ada orang lain yang melakukan push ke branch main di remote, perubahan Anda akan diterima. Namun, jika ada perubahan di remote yang belum Anda tarik, Git akan memberikan peringatan dan menghentikan push tersebut, mencegah potensi konflik.\nKesimpulan Dengan menggunakan --force-with-lease, Anda mendapatkan perlindungan tambahan dibandingkan --force, sehingga lebih aman untuk digunakan dalam lingkungan kolaboratif. Selalu berhati-hati saat menggunakan force push untuk menghindari kehilangan riwayat commit yang penting.\nSumber Referensi \u0026ldquo;Oh Shit, Git!?!\u0026rdquo; Peralatan Editor neovim Terminal direkam dengan asciinema Pemutar menggunakan asciinema-player Git interface tig ","permalink":"http://localhost:1313/id/posts/git-fu/","summary":"Permasalahan Mengulang kembali apapun yang sudah dilakukan Bayangkan Anda telah melakukan beberapa commit, tetapi kemudian Anda melakukan git reset --hard HEAD~2 dan kehilangan dua commit terakhir. Anda dapat memulihkannya dengan cara berikut:\nCek log reflog git reflog Outputnya mungkin menunjukkan: c4f2a27 (HEAD -\u0026gt; main) HEAD@{0}: reset: moving to HEAD~2 a3d5b8e HEAD@{1}: commit: Menambahkan file README Anda ingin mengembalikan commit a3d5b8e: git reset --hard a3d5b8e Untuk memulihkan, kamu dapat menggunakan\ngit reset HEAD@{index} atau","title":"Git-fu"},{"content":"Pengenalan Git, \u0026lsquo;benda\u0026rsquo; yang setiap hari digunakan oleh dev namun seringkali diabaiakan ðŸ˜ž\nMau sampai kapan clone branch baru kalo git rebase bikin frustasi?? ðŸ˜›\nOiya, disini saya akan menggunakan MacOS, jadi untuk pengguna UNIX-like (linux) dapat meniru langkah demi langkah, namun untuk pengguna windows dapat menggunakan menyesuaikan sendiri ya\nPerintah Init git init Langkah paling pertama yang dilakukan untuk menginisiasi git.\nLangkahnya\nBuat folder kosong mkdir test Masuk ke folder, lalu jalankan perintah cd test git init Git akan membuat folder .git. Folder ini berisikan metadata dan object data. Waduh apaan nih? Komponen (TODO) âžœ ardinusawan.xyz git:(main) âœ— ls -lah .git total 88 drwxr-xr-x 15 ardinusawan staff 480B May 18 11:02 . drwxr-xr-x 18 ardinusawan staff 576B May 16 20:33 .. -rw-r--r-- 1 ardinusawan staff 1.1K May 18 11:02 COMMIT_EDITMSG -rw-r--r-- 1 ardinusawan staff 104B May 15 19:58 FETCH_HEAD -rw-r--r-- 1 ardinusawan staff 21B May 16 23:09 HEAD -rw-r--r-- 1 ardinusawan staff 41B May 16 00:39 ORIG_HEAD -rw-r--r-- 1 ardinusawan staff 421B Feb 4 23:08 config -rw-r--r-- 1 ardinusawan staff 73B Feb 4 21:32 description drwxr-xr-x 16 ardinusawan staff 512B Feb 4 21:32 hooks -rw-r--r-- 1 ardinusawan staff 16K May 18 11:02 index drwxr-xr-x 3 ardinusawan staff 96B Feb 4 21:32 info drwxr-xr-x 4 ardinusawan staff 128B Feb 4 23:07 logs drwxr-xr-x 3 ardinusawan staff 96B Feb 4 21:32 modules drwxr-xr-x 242 ardinusawan staff 7.6K May 18 11:02 objects drwxr-xr-x 6 ardinusawan staff 192B May 16 00:39 refs COMMIT_EDITMSG\nMengandung pesan commit terakhir and daftar perubahan pada file (jika ada) Contoh âžœ ardinusawan.xyz git:(main) âœ— cat .git/COMMIT_EDITMSG Add neovim-ftw draft # Please enter the commit message for your changes. Lines starting # with '#' will be ignored, and an empty message aborts the commit. # # On branch main # Your branch is up to date with 'origin/main'. # # Changes to be committed: # modified: content/posts/auth-multi-platform/index.md # modified: content/posts/git-fu/index.md # new file: content/posts/neovim-ftw/index.md # modified: content/posts/website-in-pi/index.md # modified: public/index.html # modified: public/index.json # modified: public/index.xml # modified: public/posts/auth-multi-platform/index.html # new file: public/posts/freedom-with-neovim/index.html # modified: public/posts/git-fu/index.html # new file: public/posts/neovim-ftw/index.html # modified: public/posts/website-in-pi/index.html # new file: public/tags/neovim/index.html # new file: public/tags/neovim/index.xml # new file: public/tags/neovim/page/1/index.html # new file: public/tags/vim/index.html # new file: public/tags/vim/index.xml # new file: public/tags/vim/page/1/index.html FETCH_HEAD\nHEAD\nBerisikan referensi (branch/commit/tag) yang sedang aktif saat ini âžœ ardinusawan.xyz git:(main) âœ— cat .git/HEAD ref: refs/heads/main ORIG_HEAD\nconfig\nBerisikan config dari repository Contoh âžœ ardinusawan.xyz git:(main) âœ— cat .git/config [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true [submodule \u0026quot;themes/PaperMod\u0026quot;] url = https://github.com/adityatelange/hugo-PaperMod.git active = true [remote \u0026quot;origin\u0026quot;] url = git@github.com:ardinusawan/ardinusawan.github.io.git fetch = +refs/heads/*:refs/remotes/origin/* [branch \u0026quot;main\u0026quot;] remote = origin merge = refs/heads/main description\nhooks\nindex\ninfo\nlogs\nmodules\nobjects\nrefs\nClone git clone \u0026lt;your repository\u0026gt; Clone berfungsi untuk mendownload repository di perangkat lokal. Di github, kita bisa juga mendownload as zip, tapi melakukan itu tidak akan menyertakan folder .git.\nUntuk melalukan clone, di Github dapat mengklik Code -\u0026gt; copy link clone (https/ssh) Pull Fast Forward (FF) Push Upstream Fetch Merge Rebase Stash Reflog Patch Submodule Fork ","permalink":"http://localhost:1313/id/posts/git-details/","summary":"Pengenalan Git, \u0026lsquo;benda\u0026rsquo; yang setiap hari digunakan oleh dev namun seringkali diabaiakan ðŸ˜ž\nMau sampai kapan clone branch baru kalo git rebase bikin frustasi?? ðŸ˜›\nOiya, disini saya akan menggunakan MacOS, jadi untuk pengguna UNIX-like (linux) dapat meniru langkah demi langkah, namun untuk pengguna windows dapat menggunakan menyesuaikan sendiri ya\nPerintah Init git init Langkah paling pertama yang dilakukan untuk menginisiasi git.\nLangkahnya\nBuat folder kosong mkdir test Masuk ke folder, lalu jalankan perintah cd test git init Git akan membuat folder .","title":"Git-details"}]